Rcpp::sourceCpp('multinomial.cpp')
library(data.table)
path <- "/home/dillon/Desktop/Final/"
trc <- data.table::fread(paste0(path, "TRC_2013nUp_records.csv"))
trc <- trc[,
.(species = Patients_PT_ADMIT_SPECIES,
ID = Patients_CASE_ID,
date = lubridate::mdy(Patients_PT_ADMIT_DATE),
lat = Patients_RECOV_LOCATION_LATITUDE,
long = Patients_RECOV_LOCATION_LONGITUDE)]
trc <- unique(na.omit(trc), by = "ID")
trc[, `:=`(species = as.numeric(forcats::fct_lump(species, n = 7)),
date = as.Date(date))]
trc[, `:=`(
ti = multinomss::time_intervals(
date = date,
agg_unit = "days",
agg_interval = 30)
)]
head(trc, 5)
# Stores centroid coordinates as matrix
locs <- as.matrix(trc[,.(long, lat)])
study_length <- trc[, as.numeric(max(date) - min(date))]
# Calculation of space-time zones (in one step)
zones <- multinomss::zones(
locs = locs, spatial_prop = 0.01, dates = trc$ti, time_prop = 0.1, study_length = study_length, retrospective = T
)
mlc <- multinomss::multinom_mlc(zones = zones,
group = trc$species,
levels = unique(trc$species),
id = trc$ID)
mlc[[2]]
radfinder(mlc[[2]], trc$ID, locs)
Rcpp::sourceCpp('multinomial.cpp')
results <- multinomss::results(mlcs = mlc, perm_p = NULL, ids = trc$ID)
results
max_dist(results$IDs, trc$ID, locs)
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
multinomss::multinom_mlc(zones = zones, locs = locs
group = trc$species,
levels = unique(trc$species),
id = trc$ID)
multinomss::multinom_mlc(zones = zones, locs = locs,
group = trc$species,
levels = unique(trc$species),
id = trc$ID)
multinom_mlc(zones, locs, trc$species, unique(trc$species), trc$ID)
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
max_dist(results$IDs, trc$ID, locs)
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
locs
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
trc$species
unique(trc$species)
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, locs = locs, group = trc$species, levels = unique(trc$species), id = trc$ID)
multinom_mlc(zones = zones, locs = locs, group = trc$species, id = trc$ID, levels = unique(trc$species))
max_dist(results$IDs, trc$ID, locs)
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
max_dist(results$IDs, trc$ID, locs)
multinom_mlc(zones = zones, locs = locs, group = trc$species, id = trc$ID, levels = unique(trc$species))
multinomss::multinom_mlc(zones = zones, locs = locs, group = trc$species, id = trc$ID, levels = unique(trc$species))
multinomss::multinom_mlc(zones = zones, group = trc$species, id = trc$ID, levels = unique(trc$species))
trc$species
multinomss::multinom_mlc(zones = zones, group = trc$species, id = trc$ID, levels = unique(trc$species))
Rcpp::sourceCpp('multinomial.cpp')
max_dist(results$IDs, trc$ID, locs)
multinom_mlc(zones = zones, group = trc$species, id = trc$ID, levels = unique(trc$species))
zones
# Calculation of space-time zones (in one step)
zones <- multinomss::zones(
locs = locs, spatial_prop = 0.01, dates = trc$ti, time_prop = 0.1, study_length = study_length, retrospective = T
)
multinom_mlc(zones = zones, group = trc$species, id = trc$ID, levels = unique(trc$species))
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
Rcpp::sourceCpp('multinomial.cpp')
multinom_mlc(zones = zones, group = trc$species, id = trc$ID, levels = unique(trc$species))
multinom_mlc(zones = zones, locs, group = trc$species, id = trc$ID, levels = unique(trc$species))
zones
# Calculation of space-time zones (in one step)
zones <- multinomss::zones(
locs = locs, spatial_prop = 0.01, dates = trc$ti, time_prop = 0.1, study_length = study_length, retrospective = T
)
multinom_mlc(zones = zones, locs, group = trc$species, id = trc$ID, levels = unique(trc$species))
Rcpp::sourceCpp('multinomial.cpp')
mlc
mlc[[2]]
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @export
results <- function (mlcs, perm_p = NULL, ids, locs)
{
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs[, `:=`(Centroid = ids[Centroid],
Radius = max_dist(IDs, ids, locs))]
mlcs[]
}
mlcs
results(mlc, NULL, trc$ID, locs)
Rcpp::sourceCpp('multinomial.cpp')
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @export
results <- function (mlcs, perm_p = NULL, ids, locs)
{
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs[, `:=`(Centroid = ids[Centroid],
Radius = max_dist(IDs, ids, locs))]
mlcs[]
}
results(mlc, NULL, trc$ID, locs)
library(data.table)
path <- "/home/dillon/Desktop/Final/"
trc <- data.table::fread(paste0(path, "TRC_2013nUp_records.csv"))
trc <- trc[,
.(species = Patients_PT_ADMIT_SPECIES,
ID = Patients_CASE_ID,
date = lubridate::mdy(Patients_PT_ADMIT_DATE),
lat = Patients_RECOV_LOCATION_LATITUDE,
long = Patients_RECOV_LOCATION_LONGITUDE)]
trc <- unique(na.omit(trc), by = "ID")
trc[, `:=`(species = as.numeric(forcats::fct_lump(species, n = 7)),
date2 = as.Date(date))]
trc[, `:=`(
ti = multinomss::time_intervals(
date = date,
agg_unit = "days",
agg_interval = 30)
)]
head(trc, 5)
# Stores centroid coordinates as matrix
locs <- as.matrix(trc[,.(long, lat)])
study_length <- trc[, as.numeric(max(date) - min(date))]
# Calculation of space-time zones (in one step)
zones <- multinomss::zones(
locs = locs, spatial_prop = 0.01, dates = trc$ti, time_prop = 0.1, study_length = study_length, retrospective = T
)
mlc <- multinomss::multinom_mlc(zones = zones,
group = trc$species,
levels = unique(trc$species),
id = trc$ID)
mlc
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @param locs A matrix of coordinates for each observation/centroid
#' @export
results2 <- function (mlcs, perm_p = NULL, ids, locs, non_overlapping = TRUE)
{
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs <- cbind(mlcs, locs[mlcs$Centroid,])
mlcs[, `:=`(`Time Lower` = as.Date(`Time Lower`, "1970-01-01"),
`Time Upper` = as.Date(`Time Upper`, "1970-01-01"),
Centroid = ids[Centroid],
Radius = multinomss::max_dist(IDs, ids, locs)
)]
if(non_overlapping = TRUE){
select <- multinomss::non_overlap(mlcs[, IDs]) + 1
mlcs <- mlcs[as.vector(select),]
}
mlcs[]
}
Rcpp::sourceCpp('multinomial.cpp')
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @param locs A matrix of coordinates for each observation/centroid
#' @export
results2 <- function (mlcs, perm_p = NULL, ids, locs, non_overlapping = TRUE)
{
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs <- cbind(mlcs, locs[mlcs$Centroid,])
mlcs[, `:=`(`Time Lower` = as.Date(`Time Lower`, "1970-01-01"),
`Time Upper` = as.Date(`Time Upper`, "1970-01-01"),
Centroid = ids[Centroid],
Radius = multinomss::max_dist(IDs, ids, locs)
)]
if(non_overlapping = TRUE){
select <- non_overlap(mlcs[, IDs]) + 1
mlcs <- mlcs[as.vector(select),]
}
mlcs[]
}
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @param locs A matrix of coordinates for each observation/centroid
#' @export
results2 <- function (mlcs, perm_p = NULL, ids, locs, non_overlapping = TRUE) {
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs <- cbind(mlcs, locs[mlcs$Centroid,])
mlcs[, `:=`(`Time Lower` = as.Date(`Time Lower`, "1970-01-01"),
`Time Upper` = as.Date(`Time Upper`, "1970-01-01"),
Centroid = ids[Centroid],
Radius = multinomss::max_dist(IDs, ids, locs)
)]
if(non_overlapping = TRUE){
select <- non_overlap(mlcs[, IDs]) + 1
mlcs <- mlcs[as.vector(select),]
}
mlcs[]
}
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @param locs A matrix of coordinates for each observation/centroid
#' @export
results2 <- function (mlcs, perm_p = NULL, ids, locs, non_overlapping = TRUE) {
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs <- cbind(mlcs, locs[mlcs$Centroid,])
mlcs[, `:=`(`Time Lower` = as.Date(`Time Lower`, "1970-01-01"),
`Time Upper` = as.Date(`Time Upper`, "1970-01-01"),
Centroid = ids[Centroid],
Radius = multinomss::max_dist(IDs, ids, locs)
)]
if(non_overlapping == TRUE){
select <- non_overlap(mlcs[, IDs]) + 1
mlcs <- mlcs[as.vector(select),]
}
mlcs[]
}
results2(mlc, NULL, trc$ID, locs)
#' Used to format results for output
#'
#' @param mlcs A list produced by the \code{multinom_mlc} function
#' @param perm_p Permutation p-values produced by the \code{multinom_permutation} function
#' @param ids A vector that corresponds to the ID of each observation
#' @param locs A matrix of coordinates for each observation/centroid
#' @export
results2 <- function (mlcs, perm_p = NULL, ids, locs, non_overlapping = TRUE) {
mlcs[[1]] <- data.table::data.table(mlcs[[1]])
data.table::setnames(mlcs[[1]], old = names(mlcs[[1]]), new = c("Centroid",
"Time Lower",
"Time Upper",
"LR Stat"))
if(!is.null(perm_p)){
ps <- data.table::data.table(multinomss::p_val(unique(mlcs[[1]][["LR Stat"]]),
perm_p))
data.table::setnames(ps, old = names(ps), new = c("LR Stat",
"p-value"))
mlcs[[1]] <- data.table::merge.data.table(mlcs[[1]], ps,
all = T, sort = F)[, c(2, 3, 4, 1, 5)]
mlcs <- purrr::reduce(mlcs, cbind)
}
else{
mlcs[[1]] <- mlcs[[1]][, c(2, 3, 4, 1)]
mlcs <- purrr::reduce(mlcs, cbind)
}
mlcs <- mlcs[order(`LR Stat`, decreasing = T)][, .SD[1],
by = .(Centroid)]
data.table::setnames(mlcs, old = c("elt"), new = c("IDs"))
mlcs <- cbind(mlcs, locs[mlcs$Centroid,])
mlcs[, `:=`(`Time Lower` = as.Date(`Time Lower`, "1970-01-01") + 30,
`Time Upper` = as.Date(`Time Upper`, "1970-01-01") + 30,
Centroid = ids[Centroid],
Radius = multinomss::max_dist(IDs, ids, locs)
)]
if(non_overlapping == TRUE){
select <- non_overlap(mlcs[, IDs]) + 1
mlcs <- mlcs[as.vector(select),]
}
mlcs[]
}
results2(mlc, NULL, trc$ID, locs)
results <- results2(mlc, NULL, trc$ID, locs)
results$IDs
unlist(results$IDs)
unique(unlist(results$IDs))
duplicated(unlist(results$IDs))
which(duplicated(unlist(results$IDs)) == T)
unlist(results$IDs)[c(756, 998, 1013)]
results
cluster_map <- function(results){
dat <- sf::st_as_sf(results, coords = c("long", "lat"))
leaflet::leaflet() %>%
addProviderTiles(provider = providers$OpenStreetMap) %>%
addCircleMarkers(data = dat,
color = 'red',
fill = 'red',
fillOpacity = 0,
radius = 1) %>%
addCircles(data = dat,
radius = ~ I(Radius * 1000),
weight = 1,
color = 'blue',
fillOpacity = .2)
}
cluster_map(results)
library(data.table)
cluster_map(results)
library(magrittr)
cluster_map(results)
library(leaflet)
cluster_map(results)
fread("/home/dillon/Desktop/Final/LL_perm.csv")
fread("/home/dillon/Desktop/Final/LL_permutation.csv")
LLs <- fread("/home/dillon/Desktop/Final/LL_permutation.csv")
results(mlc, perm_p = LLs, ids = trc$ID, locs)
results2(mlc, perm_p = LLs, ids = trc$ID, locs)
LLs
LLs[[V1]]
LLs$V1
results2(mlc, perm_p = LLs$V1, ids = trc$ID, locs)
results <- results2(mlc, perm_p = LLs$V1, ids = trc$ID, locs)
results[`p-value` < 0.05,]
sig_results <- results[`p-value` < 0.05,]
cluster_map(sig_results)
